// Generated by gencpp from file ros1_bridge_support_pkg/MyCustomMessage.msg
// DO NOT EDIT!


#ifndef ROS1_BRIDGE_SUPPORT_PKG_MESSAGE_MYCUSTOMMESSAGE_H
#define ROS1_BRIDGE_SUPPORT_PKG_MESSAGE_MYCUSTOMMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros1_bridge_support_pkg
{
template <class ContainerAllocator>
struct MyCustomMessage_
{
  typedef MyCustomMessage_<ContainerAllocator> Type;

  MyCustomMessage_()
    : value_boolean(false)
    , value_integer(0)
    , value_float(0.0)
    , value_string()  {
    }
  MyCustomMessage_(const ContainerAllocator& _alloc)
    : value_boolean(false)
    , value_integer(0)
    , value_float(0.0)
    , value_string(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _value_boolean_type;
  _value_boolean_type value_boolean;

   typedef int32_t _value_integer_type;
  _value_integer_type value_integer;

   typedef float _value_float_type;
  _value_float_type value_float;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_string_type;
  _value_string_type value_string;





  typedef boost::shared_ptr< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> const> ConstPtr;

}; // struct MyCustomMessage_

typedef ::ros1_bridge_support_pkg::MyCustomMessage_<std::allocator<void> > MyCustomMessage;

typedef boost::shared_ptr< ::ros1_bridge_support_pkg::MyCustomMessage > MyCustomMessagePtr;
typedef boost::shared_ptr< ::ros1_bridge_support_pkg::MyCustomMessage const> MyCustomMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator1> & lhs, const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator2> & rhs)
{
  return lhs.value_boolean == rhs.value_boolean &&
    lhs.value_integer == rhs.value_integer &&
    lhs.value_float == rhs.value_float &&
    lhs.value_string == rhs.value_string;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator1> & lhs, const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros1_bridge_support_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c00790425d14a25b56563df5c8c07bbd";
  }

  static const char* value(const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc00790425d14a25bULL;
  static const uint64_t static_value2 = 0x56563df5c8c07bbdULL;
};

template<class ContainerAllocator>
struct DataType< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros1_bridge_support_pkg/MyCustomMessage";
  }

  static const char* value(const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## file 'MyCustomMessage.msg'\n"
"\n"
"bool value_boolean\n"
"int32 value_integer\n"
"float32 value_float\n"
"string value_string\n"
;
  }

  static const char* value(const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value_boolean);
      stream.next(m.value_integer);
      stream.next(m.value_float);
      stream.next(m.value_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyCustomMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros1_bridge_support_pkg::MyCustomMessage_<ContainerAllocator>& v)
  {
    s << indent << "value_boolean: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value_boolean);
    s << indent << "value_integer: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value_integer);
    s << indent << "value_float: ";
    Printer<float>::stream(s, indent + "  ", v.value_float);
    s << indent << "value_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.value_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS1_BRIDGE_SUPPORT_PKG_MESSAGE_MYCUSTOMMESSAGE_H
